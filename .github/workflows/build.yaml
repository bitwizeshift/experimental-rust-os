name: Build
on:
  push:
    branches: [master, feature/*]
  pull_request:
    branches: [master]
  workflow_call:
  workflow_dispatch:

jobs:
  format:
    name: Check Format
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain
        with:
          components: rustfmt

      - name: Check format
        run: cargo fmt --all -- --check

  check:
    name: Check Manifest
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Check manifest
        run: cargo check --verbose --workspace

  deny:
    name: Cargo Deny
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Install cargo-deny
        run: |
          cargo install --locked cargo-deny

      - name: Check cargo-deny
        run: |
          cargo deny check

  clippy:
    name: Static Analysis
    runs-on: ubuntu-latest
    continue-on-error: true
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain
        with:
          components: clippy

      - name: Check clippy
        run: cargo clippy --no-deps -- --deny clippy::all

  doctest:
    name: Doctest
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Doctest
        run: cargo test --doc --verbose

  build:
    name: Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Build
        run: cargo build --verbose

  test:
    name: Test
    runs-on: ${{ matrix.os }}
    needs: [build]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Test
        run: cargo test --verbose

  coverage:
    name: Code Coverage
    runs-on: ${{ matrix.os }}
    needs: [build, test]
    strategy:
      matrix:
        os:
          - ubuntu-latest
          - macos-latest
          - windows-latest
    defaults:
      run:
        shell: bash
    env:
      OUTPUT_FILE: ${{matrix.os}}-codecov.json
      COVERAGE_MINIMUM: ${{ 70.0 }}

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install toolchain
        uses: ./.github/actions/rust-toolchain

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate Coverage Report
        id: report
        run: |
          cargo llvm-cov --json --output-path ${{ env.OUTPUT_FILE }}
          echo "coverage=$(cat ${{ env.OUTPUT_FILE }})" >> "${GITHUB_OUTPUT}"

      - name: Check Coverage Requirement
        env:
          COVERAGE: ${{fromJson(steps.report.outputs.coverage).data[0].totals.lines.percent}}
        run: |
          if [[ ${{env.COVERAGE_MINIMUM}} > ${{env.COVERAGE}} ]]; then
            echo "Error: Code coverage '${COVERAGE}%' is below this project's minimum '${COVERAGE_MINIMUM}%'!" >&2
            exit 1
          fi

      - name: Upload Artifact
        uses: actions/upload-artifact@v1
        if: success() || failure()
        with:
          name: ${{env.OUTPUT_FILE}}
          path: ${{env.OUTPUT_FILE}}
